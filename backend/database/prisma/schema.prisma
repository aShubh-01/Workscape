// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ApplicationStatus {
  Reached
  Viewed
  Withdrawn
  OnHold
  Rejected
  Selected
}

enum UserRole {
  Applicant
  Recruiter
}

enum JobType {
  FullTime
  PartTime
  Internship
}

enum JobStatus {
  Active
  Closed
  Paused
}

model User {
  id Int @id @default(autoincrement())
  firstName String
  middleName String?
  lastName String
  email String
  phoneNo String?
  role UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  portfolios Portfolio[]
  jobs Job[]
}

model Job {
  id Int @id @default(autoincrement())
  jobTitle String
  organizationName String
  jobDescription String
  jobLocation String
  minExperience Int
  maxExperience Int
  vacancies Int?
  pay String
  joiningDate DateTime
  contactPhone String?
  contactEmail String?
  postedAt DateTime @default(now())
  jobType JobType
  jobStatus JobStatus

  applications Application[]

  userId Int
  user User @relation(fields: [userId], references: [id])
}

model Portfolio {
  id Int @id @default(autoincrement())
  portfolioTitle String
  portfolioDescription String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  userId Int
  users User @relation(fields: [userId], references: [id])

  applications Application[]
  experiences Experience[]
  resumes Resume[]
  certifications Certification[]
  projects Project[]
}

model Experience {
  id Int @id @default(autoincrement())
  experienceTitle String
  organizationName String
  startDate DateTime
  endDate DateTime?
  experienceDescription String?

  portfolioId Int
  portfolio Portfolio @relation(fields: [portfolioId], references: [id])
}

model Resume {
  id Int @id @default(autoincrement())
  resumeObjectId String
  
  portfolioId Int @unique
  portfolio Portfolio @relation(fields: [portfolioId], references: [id])
}

model Certification {
  id Int @id @default(autoincrement())
  certificationTitle String
  certificationDescription String?
  certificationOrganization String?
  certificateObjectId String

  portfolioId Int
  portfolio Portfolio @relation(fields: [portfolioId], references: [id])
}

model Project {
  id Int @id @default(autoincrement())
  projectTitle String
  projectDescription String?
  
  projectLinks ProjectLink[]

  portfolioId Int
  portfolio Portfolio @relation(fields: [portfolioId], references: [id])

}

model ProjectLink {
  id Int @id @default(autoincrement())
  linkTitle String
  linkUrl String

  projectId Int
  project Project @relation(fields: [projectId], references: [id])
}

model Application {
  id Int @id @default(autoincrement())
  applicationStatus ApplicationStatus
  appliedAt DateTime @default(now())
  updatedAt DateTime @default(now())
  
  portfolioId Int
  portfolio Portfolio @relation(fields: [portfolioId], references: [id])
  jobId Int
  job Job @relation(fields: [jobId], references: [id])
}